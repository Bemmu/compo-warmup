package b;

// Following these articles:
// http://webstaff.itn.liu.se/~stegu/TNM022-2005/perlinnoiselinks/perlin-noise-math-faq.html
// https://flafla2.github.io/2014/08/09/perlinnoise.html
// http://mrl.nyu.edu/~perlin/paper445.pdf
//
// The above seem to way overcomplicate things. 
///
// http://mrl.nyu.edu/~perlin/noise/

class Perlin {
	static var p = [
		127, 245, 128, 183, 140, 92, 11, 195, 0, 43, 149, 89, 146, 136, 165, 77, 119, 103, 49, 38, 76, 74, 29, 201, 147, 19, 72, 75, 155, 132, 39, 73, 133, 166, 113, 249, 108, 169, 44, 217, 50, 253, 98, 145, 250, 189, 222, 18, 138, 90, 51, 212, 214, 35, 34, 157, 241, 79, 120, 67, 24, 99, 255, 239, 87, 220, 14, 70, 60, 8, 229, 26, 17, 170, 21, 106, 137, 64, 141, 243, 178, 126, 215, 16, 219, 4, 244, 1, 208, 176, 2, 118, 10, 81, 36, 158, 130, 182, 193, 225, 56, 187, 3, 206, 191, 78, 163, 154, 161, 231, 199, 232, 97, 196, 69, 144, 23, 9, 151, 207, 171, 52, 63, 198, 168, 223, 110, 247, 28, 88, 226, 251, 172, 218, 164, 33, 216, 7, 96, 25, 156, 122, 152, 86, 83, 5, 185, 55, 41, 123, 186, 71, 190, 143, 200, 84, 85, 234, 107, 12, 15, 129, 115, 112, 148, 227, 45, 233, 104, 47, 32, 177, 131, 53, 134, 197, 62, 236, 42, 179, 61, 188, 100, 252, 228, 40, 105, 230, 211, 180, 202, 192, 213, 117, 27, 54, 203, 114, 181, 30, 242, 194, 159, 210, 31, 142, 57, 116, 46, 124, 22, 6, 91, 209, 13, 121, 184, 68, 224, 80, 93, 240, 82, 139, 37, 174, 167, 238, 59, 102, 125, 235, 160, 153, 162, 173, 175, 237, 20, 246, 248, 101, 58, 111, 109, 221, 95, 48, 65, 204, 254, 205, 150, 135, 66, 94,
		127, 245, 128, 183, 140, 92, 11, 195, 0, 43, 149, 89, 146, 136, 165, 77, 119, 103, 49, 38, 76, 74, 29, 201, 147, 19, 72, 75, 155, 132, 39, 73, 133, 166, 113, 249, 108, 169, 44, 217, 50, 253, 98, 145, 250, 189, 222, 18, 138, 90, 51, 212, 214, 35, 34, 157, 241, 79, 120, 67, 24, 99, 255, 239, 87, 220, 14, 70, 60, 8, 229, 26, 17, 170, 21, 106, 137, 64, 141, 243, 178, 126, 215, 16, 219, 4, 244, 1, 208, 176, 2, 118, 10, 81, 36, 158, 130, 182, 193, 225, 56, 187, 3, 206, 191, 78, 163, 154, 161, 231, 199, 232, 97, 196, 69, 144, 23, 9, 151, 207, 171, 52, 63, 198, 168, 223, 110, 247, 28, 88, 226, 251, 172, 218, 164, 33, 216, 7, 96, 25, 156, 122, 152, 86, 83, 5, 185, 55, 41, 123, 186, 71, 190, 143, 200, 84, 85, 234, 107, 12, 15, 129, 115, 112, 148, 227, 45, 233, 104, 47, 32, 177, 131, 53, 134, 197, 62, 236, 42, 179, 61, 188, 100, 252, 228, 40, 105, 230, 211, 180, 202, 192, 213, 117, 27, 54, 203, 114, 181, 30, 242, 194, 159, 210, 31, 142, 57, 116, 46, 124, 22, 6, 91, 209, 13, 121, 184, 68, 224, 80, 93, 240, 82, 139, 37, 174, 167, 238, 59, 102, 125, 235, 160, 153, 162, 173, 175, 237, 20, 246, 248, 101, 58, 111, 109, 221, 95, 48, 65, 204, 254, 205, 150, 135, 66, 94
	];

	static function ease(x:Float):Float {
		return 3*x*x - 2*x*x*x;
	}

	static function newEase(x:Float):Float {
		return 6*x*x*x*x*x - 15*x*x*x*x + 10*x*x*x;
	}

	public static function lerp(t:Float, a:Float, b:Float) {
		return a + t * (b - a);
	}

	public static function noise(x:Float, y:Float, z:Float):Float {

		var X:Int = Std.int(Math.floor(x)) & 255;
		var Y:Int = Std.int(Math.floor(y)) & 255;
		var Z:Int = Std.int(Math.floor(z)) & 255;

		x -= Math.floor(x);
		y -= Math.floor(y);
		z -= Math.floor(z);

		var u:Float = newEase(x);
		var v:Float = newEase(y);
		var w:Float = newEase(z);

		// I guess the point here is just to get some random
		// values mapped to each corner.
		var A = p[X] + Y, AA = p[A]+Z, AB = p[A+1]+Z;
		var B = p[X+1] + Y, BA = p[B]+Z, BB = p[B+1]+Z;

		return lerp(w, lerp(v, lerp(u, grad(p[AA], x,   y, z),
			                           grad(p[BA], x-1, y, z)),
		                       lerp(u, grad(p[AB], x,   y-1, z),
		                       	       grad(p[BB], x-1, y-1, z))),
		               lerp(v, lerp(u, grad(p[AA+1], x, y, z-1),
		               	               grad(p[BA+1], x-1, y, z-1)),
		                       lerp(u, grad(p[AB+1], x, y-1, z-1),
		                       	       grad(p[BB+1], x-1, y-1, z-1))));
	}

	// Returns what? Probably one of x, y or z based on the hash
	// Or possibly x + y, y - x or some other such combination.
	static function grad(hash:Int, x:Float, y:Float, z:Float):Float {

		var h = hash & 15;
		var u = h < 8 ? x : y,
		    v = h < 4 ? y : h == 12 || h == 14 ? x : z;
		return ((h&1) == 0 ? u : -u) + ((h&2) == 0 ? v : -v);
	}
}